CURRENT STABLE PERFORMANCE:
ResNet-AvgPool-Flatten-Dense(512)-Dense(256)-Dense(128)-Dense(1, sigmoid)
Batch size=32
Adam lr=1e-3
tapi cuma acc, loss nya mbulet ae

114/114 [==============================] - 22s 137ms/step - loss: 0.7973 - auc: 0.4819 - accuracy: 0.4874 - val_loss: 0.6932 - val_auc: 0.5000 - val_accuracy: 0.5000
Epoch 2/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6988 - auc: 0.4893 - accuracy: 0.4945 - val_loss: 0.6931 - val_auc: 0.5000 - val_accuracy: 0.5000
Epoch 3/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6953 - auc: 0.4994 - accuracy: 0.4953 - val_loss: 0.6941 - val_auc: 0.5044 - val_accuracy: 0.5000
Epoch 4/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6959 - auc: 0.4811 - accuracy: 0.4846 - val_loss: 0.6931 - val_auc: 0.5000 - val_accuracy: 0.5000
Epoch 5/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6941 - auc: 0.4939 - accuracy: 0.4934 - val_loss: 0.6932 - val_auc: 0.4989 - val_accuracy: 0.5000
Epoch 6/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6938 - auc: 0.5026 - accuracy: 0.5016 - val_loss: 0.6931 - val_auc: 0.5200 - val_accuracy: 0.5000
Epoch 7/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6939 - auc: 0.4975 - accuracy: 0.5000 - val_loss: 0.6933 - val_auc: 0.5207 - val_accuracy: 0.5044
Epoch 8/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6937 - auc: 0.5070 - accuracy: 0.5112 - val_loss: 0.6929 - val_auc: 0.5130 - val_accuracy: 0.5121
Epoch 9/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6935 - auc: 0.5264 - accuracy: 0.5288 - val_loss: 0.6959 - val_auc: 0.4991 - val_accuracy: 0.5000
Epoch 10/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6957 - auc: 0.4940 - accuracy: 0.4956 - val_loss: 0.6953 - val_auc: 0.4870 - val_accuracy: 0.4890
Epoch 11/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6938 - auc: 0.5122 - accuracy: 0.5121 - val_loss: 0.6928 - val_auc: 0.5131 - val_accuracy: 0.5329
Epoch 12/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6898 - auc: 0.5566 - accuracy: 0.5444 - val_loss: 0.6932 - val_auc: 0.5254 - val_accuracy: 0.5121
Epoch 13/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6862 - auc: 0.5792 - accuracy: 0.5532 - val_loss: 0.7261 - val_auc: 0.5617 - val_accuracy: 0.5439
Epoch 14/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6843 - auc: 0.5853 - accuracy: 0.5680 - val_loss: 0.6932 - val_auc: 0.5504 - val_accuracy: 0.5559
Epoch 15/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6805 - auc: 0.6057 - accuracy: 0.5883 - val_loss: 0.7716 - val_auc: 0.5635 - val_accuracy: 0.5296
Epoch 16/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6781 - auc: 0.6003 - accuracy: 0.5726 - val_loss: 0.7018 - val_auc: 0.5702 - val_accuracy: 0.5285
Epoch 17/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6711 - auc: 0.6256 - accuracy: 0.5948 - val_loss: 0.6892 - val_auc: 0.5779 - val_accuracy: 0.5504
Epoch 18/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6697 - auc: 0.6253 - accuracy: 0.5921 - val_loss: 0.6897 - val_auc: 0.5696 - val_accuracy: 0.5647
Epoch 19/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6605 - auc: 0.6507 - accuracy: 0.6168 - val_loss: 0.6957 - val_auc: 0.5922 - val_accuracy: 0.5559
Epoch 20/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6624 - auc: 0.6424 - accuracy: 0.6036 - val_loss: 0.7004 - val_auc: 0.5874 - val_accuracy: 0.5197
Evaluating model fold 1/5...
29/29 [==============================] - 1s 30ms/step - loss: 0.7004 - auc: 0.5874 - accuracy: 0.5197

00 - val_accuracy: 0.5000
Epoch 2/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6998 - auc_1: 0.4971 - accuracy: 0.4986 - val_loss: 0.6932 - val_auc_1: 0.5000 - val_accuracy: 0.5011
Epoch 3/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6966 - auc_1: 0.4910 - accuracy: 0.4877 - val_loss: 0.6937 - val_auc_1: 0.5022 - val_accuracy: 0.5000
Epoch 4/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6952 - auc_1: 0.4946 - accuracy: 0.4860 - val_loss: 0.6924 - val_auc_1: 0.5060 - val_accuracy: 0.5022
Epoch 5/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6947 - auc_1: 0.5058 - accuracy: 0.5082 - val_loss: 0.6931 - val_auc_1: 0.5326 - val_accuracy: 0.5044
Epoch 6/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6907 - auc_1: 0.5490 - accuracy: 0.5362 - val_loss: 0.6978 - val_auc_1: 0.5249 - val_accuracy: 0.5088
Epoch 7/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6921 - auc_1: 0.5382 - accuracy: 0.5269 - val_loss: 0.6933 - val_auc_1: 0.5263 - val_accuracy: 0.5066
Epoch 8/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6890 - auc_1: 0.5564 - accuracy: 0.5471 - val_loss: 0.6995 - val_auc_1: 0.5152 - val_accuracy: 0.5110
Epoch 9/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6904 - auc_1: 0.5437 - accuracy: 0.5332 - val_loss: 0.6937 - val_auc_1: 0.5167 - val_accuracy: 0.5143
Epoch 10/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6879 - auc_1: 0.5681 - accuracy: 0.5513 - val_loss: 0.7012 - val_auc_1: 0.5127 - val_accuracy: 0.4978
Epoch 11/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6864 - auc_1: 0.5778 - accuracy: 0.5598 - val_loss: 0.6839 - val_auc_1: 0.5943 - val_accuracy: 0.5603
Epoch 12/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6776 - auc_1: 0.6059 - accuracy: 0.5779 - val_loss: 0.7168 - val_auc_1: 0.5552 - val_accuracy: 0.5164
Epoch 13/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6755 - auc_1: 0.6091 - accuracy: 0.5825 - val_loss: 0.6952 - val_auc_1: 0.6097 - val_accuracy: 0.5471
Epoch 14/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6728 - auc_1: 0.6121 - accuracy: 0.5765 - val_loss: 0.7456 - val_auc_1: 0.5837 - val_accuracy: 0.5230
Epoch 15/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6681 - auc_1: 0.6334 - accuracy: 0.5932 - val_loss: 0.7235 - val_auc_1: 0.5757 - val_accuracy: 0.5329
Epoch 16/20
114/114 [==============================] - 14s 127ms/step - loss: 0.6578 - auc_1: 0.6571 - accuracy: 0.6195 - val_loss: 0.7404 - val_auc_1: 0.5712 - val_accuracy: 0.5307
Epoch 17/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6625 - auc_1: 0.6419 - accuracy: 0.6025 - val_loss: 0.6971 - val_auc_1: 0.5563 - val_accuracy: 0.5461
Epoch 18/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6551 - auc_1: 0.6581 - accuracy: 0.6168 - val_loss: 0.6935 - val_auc_1: 0.5515 - val_accuracy: 0.5395
Epoch 19/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6483 - auc_1: 0.6733 - accuracy: 0.6234 - val_loss: 0.7157 - val_auc_1: 0.5428 - val_accuracy: 0.5175
Epoch 20/20
114/114 [==============================] - 14s 126ms/step - loss: 0.6259 - auc_1: 0.7077 - accuracy: 0.6532 - val_loss: 0.7020 - val_auc_1: 0.6017 - val_accuracy: 0.5746
Evaluating model fold 2/5...
29/29 [==============================] - 1s 30ms/step - loss: 0.7020 - auc_1: 0.6017 - accuracy: 0.5746

* 20220405-101110
if metrics is None:
    metrics = [tf.keras.metrics.AUC(), "accuracy"]

input_tensor = tf.keras.layers.Input(shape=self.input_shape)

# ResNet50 block
model = resnet50_block(input_tensor=input_tensor)

# The top layer of ResNet
model = tf.keras.layers.AveragePooling2D(name="avg_pool")(model)
model = tf.keras.layers.Flatten()(model)

# The fully connected layers
model = tf.keras.layers.Dense(512, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)
model = tf.keras.layers.Dense(256, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(128, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(1, activation="sigmoid")(model)

model = tf.keras.models.Model(
    inputs=input_tensor, outputs=model, name="ResNet50"
)

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),
    loss=tf.keras.losses.BinaryCrossentropy(),
    metrics=metrics,
)

* 20220405-104100
if metrics is None:
    metrics = [tf.keras.metrics.AUC(), "accuracy"]

input_tensor = tf.keras.layers.Input(shape=self.input_shape)

# ResNet50 block
model = resnet50_block(input_tensor=input_tensor)

# The top layer of ResNet
model = tf.keras.layers.AveragePooling2D(name="avg_pool")(model)
model = tf.keras.layers.Flatten()(model)

# The fully connected layers
model = tf.keras.layers.Dense(512, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)
model = tf.keras.layers.Dense(256, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(128, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(32, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(1, activation="sigmoid")(model)

model = tf.keras.models.Model(
    inputs=input_tensor, outputs=model, name="ResNet50"
)

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),
    loss=tf.keras.losses.BinaryCrossentropy(),
    metrics=metrics,
)

* 20220405-110715
if metrics is None:
    metrics = [tf.keras.metrics.AUC(), "accuracy"]

input_tensor = tf.keras.layers.Input(shape=self.input_shape)

# ResNet50 block
model = resnet50_block(input_tensor=input_tensor)

# The top layer of ResNet
model = tf.keras.layers.AveragePooling2D(name="avg_pool")(model)
model = tf.keras.layers.Flatten()(model)

# The fully connected layers
model = tf.keras.layers.Dense(512, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)
model = tf.keras.layers.Dense(256, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(128, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(32, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(1, activation="sigmoid")(model)

model = tf.keras.models.Model(
    inputs=input_tensor, outputs=model, name="ResNet50"
)

model.compile(
    optimizer=tf.keras.optimizers.Adam(learning_rate=1e-3),
    loss=tf.keras.losses.BinaryCrossentropy(),
    metrics=metrics,
)

* 20220405-112639
if metrics is None:
    metrics = [tf.keras.metrics.AUC(), "accuracy"]

input_tensor = tf.keras.layers.Input(shape=self.input_shape)

# ResNet50 block
model = resnet50_block(input_tensor=input_tensor)

# The top layer of ResNet
model = tf.keras.layers.AveragePooling2D(name="avg_pool")(model)
model = tf.keras.layers.Flatten()(model)

# The fully connected layers
model = tf.keras.layers.Dense(512, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)
model = tf.keras.layers.Dense(256, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(128, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(32, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(1, activation="sigmoid")(model)

model = tf.keras.models.Model(
    inputs=input_tensor, outputs=model, name="ResNet50"
)

model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=1e-3),
    loss=tf.keras.losses.BinaryCrossentropy(),
    metrics=metrics,
)

* 20220405-115210
if metrics is None:
    metrics = [tf.keras.metrics.AUC(), "accuracy"]

input_tensor = tf.keras.layers.Input(shape=self.input_shape)

# ResNet50 block
model = resnet50_block(input_tensor=input_tensor)

# The top layer of ResNet
model = tf.keras.layers.AveragePooling2D(name="avg_pool")(model)
model = tf.keras.layers.Flatten()(model)

# The fully connected layers
model = tf.keras.layers.Dense(512, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)
model = tf.keras.layers.Dense(256, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(128, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(32, activation="relu")(model)
model = tf.keras.layers.Dropout(rate=0.2)(model)

model = tf.keras.layers.Dense(1, activation="sigmoid")(model)

model = tf.keras.models.Model(
    inputs=input_tensor, outputs=model, name="ResNet50"
)

model.compile(
    optimizer=tf.keras.optimizers.SGD(learning_rate=1e-3),
    loss=tf.keras.losses.BinaryCrossentropy(),
    metrics=metrics,
)